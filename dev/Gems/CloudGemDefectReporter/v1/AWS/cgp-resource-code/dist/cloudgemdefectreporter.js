!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["6c","6d"],["8","6","26","7","9","a","3","71","3d","f","24","78","76","77","e","d","12","13"],!1,function(a){this.require,this.exports,this.module;a.register("6e",["8","6","26","6f","7","9","a"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){j=function(){function a(a,b,d){this.http=a,this.aws=b,this.metricservice=d,this.displayName="Defect Reporter",this.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/defect_reporter._CB1524608681_.png",this.state=new c.TackableStatus,this.metric=new c.TackableMeasure}return a.prototype.ngOnInit=function(){this._apiHandler=new f.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},a.prototype.report=function(a){a.name="",a.value="",new e.Observable(function(a){setTimeout(function(){a.next({value:""})},3e3),setTimeout(function(){a.complete()},1e3)}).subscribe(function(b){a.value=b.value})},a.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},k([d.Input(),l("design:type",Object)],a.prototype,"context",void 0),k([d.Input(),l("design:type",String)],a.prototype,"displayName",void 0),k([d.Input(),l("design:type",String)],a.prototype,"srcIcon",void 0),a=k([d.Component({selector:"cloudgemdefectreporter-thumbnail",template:'\n    <thumbnail-gem\n        [title]="displayName"\n        [cost]="\'High\'"\n        [srcIcon]="srcIcon"\n        [metric]="metric"\n        [state]="state"\n        >\n    </thumbnail-gem>'}),l("design:paramtypes",[g.Http,h.AwsService,i.LyMetricService])],a)}(),a("CloudGemDefectReporterThumbnailComponent",j)}}}),a.register("70",["6","8","a","7","9"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),k=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},l=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a}],execute:function(){!function(a){a[a.DefectList=0]="DefectList",a[a.DefectDetails=1]="DefectDetails"}(h||(h={})),a("Pages",h),i=function(a){function b(b,c,d,e){var f=a.call(this)||this;return f.http=b,f.aws=c,f.definition=d,f.metric=e,f.toDefectDetailsPage=function(a){a&&(f.showingDefect=a,f.showingPage=h.DefectDetails)},f.toDefectListPage=function(){f.showingPage=h.DefectList,f.showingDefect={},0===f.defectListPage.tabIndex?f.defectListPage.datatable.updateFilteredRows():f.defectListPage.bookmarktable.updateFilteredRows()},f}return j(b,a),b.prototype.ngOnInit=function(){var a=this.definition.getService("CloudGemMetric");this._metricApiHandler=new a.constructor(a.serviceUrl,this.http,this.aws,this.metric,this.context.identifier),this.showingPage=h.DefectList},b.prototype.getMetricApiHandler=function(){return this._metricApiHandler},k([c.Input(),l("design:type",Object)],b.prototype,"context",void 0),k([c.ViewChild("DefectListPage"),l("design:type",Object)],b.prototype,"defectListPage",void 0),b=k([c.Component({selector:"cloudgemdefectreporter-index",template:'<div class="gem-container">          \x3c!-- Defect List Tab --\x3e     <defect-list-page #DefectListPage         [hidden]="showingPage !== 0"          [context]="context"          [metricApiHandler]="getMetricApiHandler()"         [toDefectDetailsPageCallback]="toDefectDetailsPage">     </defect-list-page>      \x3c!-- Defect Details Tab --\x3e     <defect-details-page          *ngIf="showingPage === 1"          [context]="context"         [configurationMappings]="defectListPage.configurationMappings"          [toDefectListPageCallback]="toDefectListPage"          [defect]="showingDefect">     </defect-details-page>  </div>'}),l("design:paramtypes",[f.Http,g.AwsService,e.DefinitionService,e.LyMetricService])],b)}(d.AbstractCloudGemIndexComponent),a("CloudGemDefectReporterIndexComponent",i)}}}),a.register("6d",["3","26","6f","71"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){}],execute:function(){f=function(a){function b(b,c,d,e,f){return void 0===e&&(e=null),void 0===f&&(f=void 0),a.call(this,b,c,d)||this}return g(b,a),b.prototype.getDummyDefect=function(){var a=e.RandomUtil.getRandomInt(0,2e3);console.log("Random Time Out: "+a);var b=[1];return d.Observable.of(b).delay(a)},b.prototype.getReportHeaders=function(){return a.prototype.get.call(this,"headers")},b.prototype.updateReportHeader=function(b){return a.prototype.put.call(this,"header",b)},b.prototype.getReportComments=function(b){return a.prototype.get.call(this,"comment/"+b)},b.prototype.updateReportComments=function(b){return a.prototype.put.call(this,"comment",b)},b.prototype.updateAddtionalReportInfo=function(b){return a.prototype.put.call(this,"additionalinfo",b)},b.prototype.getRecentSearches=function(b){return a.prototype.get.call(this,"recentsearches/"+b)},b.prototype.addNewSearch=function(b){return a.prototype.put.call(this,"recentsearch",b)},b.prototype.updateClientConfiguration=function(b){return a.prototype.put.call(this,"clientconfiguration",b)},b.prototype.getClientConfiguration=function(){return a.prototype.get.call(this,"clientconfiguration")},b}(c.ApiHandler),a("CloudGemDefectReporterApi",f)}}}),a.register("72",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(){}return a.getRandomInt=function(a,b){return a=Math.ceil(a),b=Math.floor(b),Math.floor(Math.random()*(b-a))+a},a}(),a("RandomUtil",c)}}}),a.register("73",["6","7","9","a","6f","3d","f"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},m=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a}],execute:function(){!function(a){a[a.Show=0]="Show",a[a.AddComment=1]="AddComment",a[a.EditComment=2]="EditComment"}(j||(j={})),a("ReportDetailMode",j),k=function(){function a(a,b,c,d){var e=this;this.http=a,this.aws=b,this.toastr=c,this.metric=d,this.isLoading=!1,this.addCommentModal=function(){e.currentComment={user:e.aws.context.authentication.user.username},e.mode=j.AddComment},this.editCommentModal=function(a){e.currentComment=JSON.parse(JSON.stringify(e.defect.comments[a])),e.currentCommentIndex=a,e.mode=j.EditComment},this.dismissModal=function(){e.mode=j.Show},this.onShowDefectListPage=function(){e.toDefectListPageCallback&&e.toDefectListPageCallback()}}return a.prototype.ngOnInit=function(){this._apiHandler=new g.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.loadDefect(),this.Modes=j},a.prototype.changeBookmarkStatus=function(){var a=this;this.defect.bookmark=0===this.defect.bookmark?1:0,this.updatePropertyValue("bookmark",this.defect.bookmark),this._apiHandler.updateReportHeader(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to update bookmarks. "+b.message)})},a.prototype.changeReportStatus=function(){var a=this;this.defect.report_status="read"===this.defect.report_status?"unread":"read",this.updatePropertyValue("report_status",this.defect.report_status),this._apiHandler.updateReportHeader(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to update the status of the current report. "+b.message)})},a.prototype.getReportStatus=function(){return"read"===this.defect.report_status?"Mark as Unread":"Mark as Read"},a.prototype.getBookmarkStatus=function(){return 0===this.defect.bookmark?"Add to Bookmarks":"Remove from Bookmarks"},a.prototype.addComment=function(){var a=this;this.modalRef.close();var b=new Date,c={date:b.toString(),content:this.currentComment.content,user:this.currentComment.user};this.defect.comments.push(c),this._apiHandler.updateReportComments(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to add the comment. "+b.message)})},a.prototype.updateComment=function(){var a=this;this.modalRef.close();var b=new Date;this.defect.comments[this.currentCommentIndex]={date:b.toString(),content:this.currentComment.content,user:this.currentComment.user},this._apiHandler.updateReportComments(this.defect).subscribe(function(a){},function(b){a.toastr.error("Failed to add the comment. "+b.message)})},a.prototype.deleteComment=function(a){var b=this;this.defect.comments.splice(a,1),this._apiHandler.updateReportComments(this.defect).subscribe(function(a){},function(a){b.toastr.error("Failed to delete the comment. "+a.message)})},a.prototype.loadDefect=function(){this.isLoading=!0;for(var a=0,b=this.configurationMappings;a<b.length;a++){var c=b[a];c.value=void 0;for(var d=0,e=c.key.split(".");d<e.length;d++){var f=e[d];if(c.value=this.defect[f],!c.value)break}}this.rawDataKeys=Object.keys(this.defect),this.removePropertyNameFromRawDataKeys("prop"),this.removePropertyNameFromRawDataKeys("comments"),this.removePropertyNameFromRawDataKeys("bookmark"),this.removePropertyNameFromRawDataKeys("report_status"),this.getAttachments(),this.getComments()},a.prototype.getAttachments=function(){for(var a=this.defect.attachment_id?JSON.parse(this.defect.attachment_id):[],b=0,c=a;b<c.length;b++){var d=c[b];this.defect[d.name+"_attachment"]={id:d.id,extension:d.extension},this.removePropertyNameFromRawDataKeys(d.name+"_attachment")}},a.prototype.getComments=function(){var a=this;this._apiHandler.getReportComments(this.defect.universal_unique_identifier).subscribe(function(b){var c=JSON.parse(b.body.text());a.defect.comments=c.result.comments,a.isLoading=!1},function(b){a.isLoading=!1,a.toastr.error("Failed to get comments. "+b.message)})},a.prototype.removePropertyNameFromRawDataKeys=function(a){var b=this.rawDataKeys.indexOf(a);-1!==b&&this.rawDataKeys.splice(b,1)},a.prototype.updatePropertyValue=function(a,b){for(var c=0,d=this.configurationMappings;c<d.length;c++){var e=d[c];if(e.key===a){e.value=b;break}}},l([c.Input(),m("design:type",Object)],a.prototype,"context",void 0),l([c.Input(),m("design:type",Function)],a.prototype,"toDefectListPageCallback",void 0),l([c.Input(),m("design:type",Object)],a.prototype,"defect",void 0),l([c.Input(),m("design:type",Object)],a.prototype,"configurationMappings",void 0),l([c.ViewChild(i.ModalComponent),m("design:type",i.ModalComponent)],a.prototype,"modalRef",void 0),a=l([c.Component({selector:"defect-details-page",template:'<facet-generator      [context]="context"      [tabs]="[\'Report Detail\', \'Raw Data\']"      [disableInheritedFacets]="true"     [metricIdentifier]="context.identifier"     (tabClicked)="tabIndex=$event"></facet-generator>  \x3c!-- Shared button by all facets --\x3e <button class="btn l-primary" (click)="onShowDefectListPage()">     < Back to Defect List </button> <button *ngIf="tabIndex === 0" class="btn btn-outline-primary float-right report-operation" (click)="changeReportStatus()">     {{getReportStatus()}} </button> <button *ngIf="tabIndex === 0" class="btn btn-outline-primary float-right report-operation" (click)="changeBookmarkStatus()">    {{getBookmarkStatus()}} </button> <button *ngIf="tabIndex === 0" class="btn btn-outline-primary float-right report-operation" (click)="addCommentModal()">     Add Comment </button>  \x3c!-- Overview Tab --\x3e <div *ngIf="tabIndex === 0">     <div *ngIf="isLoading">         <loading-spinner></loading-spinner>     </div>          <div *ngIf="!isLoading && defect">         <div class="detail-information">             <report-information [context]="context" [reportInformation]="defect" [configurationMappings]="configurationMappings" (deleteComment)="deleteComment($event)" (editComment)="editCommentModal($event)"></report-information>         </div>         <div class="detail-information">             <player-information [playerInformation]="defect" [configurationMappings]="configurationMappings"></player-information>             <system-information [systemInformation]="defect" [configurationMappings]="configurationMappings"></system-information>         </div>            </div> </div>  \x3c!-- Raw Data Tab --\x3e <div *ngIf="tabIndex === 1">     <form class="raw-data-container">         <div *ngFor="let key of rawDataKeys">             <div *ngIf="defect[key] != \'\'" class="form-group row">                 <label class="col-3 col-form-label affix">{{key}}</label>                 <label class="col-6 form-control affix">{{defect[key]}}</label>             </div>         </div>     </form> </div>  \x3c!-- Add comment and edit comment modal --\x3e <modal *ngIf="mode == Modes.AddComment || mode == Modes.EditComment"        [title]="mode == Modes.AddComment ? \'Add Comment\' : \'Edit Comment\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Add\'"        (modalSubmitted)="mode == Modes.AddComment ? addComment() : updateComment()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <form>             <div class="form-group row">                 <label class="col-3 col-form-label affix">Comment</label>                 <div class="col-9">                     <textarea class="form-control" name="comment" [(ngModel)]="currentComment[\'content\']" cols="100" rows="6"></textarea>                 </div>             </div>         </form>     </div> </modal>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}"]}),m("design:paramtypes",[d.Http,e.AwsService,h.ToastsManager,f.LyMetricService])],a)}(),a("CloudGemDefectReporterDefectDetailsPageComponent",k)}}}),a.register("74",["6","24","3d"],function(a,b){"use strict";var c,d,e,f,g=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},h=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a}],execute:function(){f=function(){function a(a){var b=this;this.toastr=a,this.loadingSort=!1,this.numberOfRowsPerPage=10,this.tmpRows=[],this.partialInputQuery="",this.manualUpdate=!1,this.filteredRows=[],this.readStatusOption="",this.onShowDefectDetailsPage=function(a){b.toDefectDetailsPageCallback&&b.toDefectDetailsPageCallback(a)}}return a.prototype.ngOnInit=function(){this.metricQueryBuilder=new d.MetricQuery(this.aws,"defect");this.partialQuery;this.fetchQueryFromInput(this.partialQuery,!1)},a.prototype.fetchQueryFromInput=function(a,b){this.partialInputQuery=a;var c=this.constructQuery(a);this.manualUpdate=b,this.fetch(c)},a.prototype.isDataAvailable=function(a){return this.filteredRows=this.filteredRows.slice(),this.allColumns.length>0&&a.length>0},a.prototype.getMaximumLimit=function(){return this.limit},a.prototype.updateFilteredRows=function(){var a=this;this.filteredRows=this.bookmark?this.rows.filter(function(a){return 1===a.bookmark}):this.rows,""!==this.readStatusOption&&(this.filteredRows=this.filteredRows.filter(function(b){return b.report_status===a.readStatusOption}))},a.prototype.constructQuery=function(a,b,c){var d=!a,e=d?"WHERE p_event_name='defect'":"WHERE p_event_name='defect' and",f=d?"":a,g=b?"ORDER BY "+b:"",h=c||"",i=this.getMaximumLimit();return this.metricQueryBuilder.toString("SELECT * FROM ${database}.${table} "+e+" "+f+" "+g+" "+h+" LIMIT "+i)},a.prototype.postQuery=function(a){return this.metricApiHandler.postQuery(a)},a.prototype.fetch=function(a){var b=this;this.loading=!0,this.clearData(),this.postQuery(a).subscribe(function(a){b.populateData(a,!1)},function(a){b.toastr.error("Unable to fetch query. Error: ",a),b.clearData(),b.loading=!1})},a.prototype.onSort=function(a){var b=this,c=a.column.prop,d=a.sorts[0],e="desc"===d.dir?"DESC":"ASC";if(this.loadingSort=!0,"report_status"===c)return this.filteredRows.sort(function(a,b){var d="read"===a[c]?1:0,f="read"===b[c]?1:0;return d>f?"ASC"===e?1:-1:d<f?"ASC"===e?-1:1:0}),void(this.loadingSort=!1);var f=this.constructQuery(this.partialQuery,c,e);this.postQuery(f).subscribe(function(a){b.populateData(a,!0),b.loadingSort=!1},function(a){b.toastr.error("Unable to sort data. Error: ",a),b.clearData(),b.loadingSort=!1})},a.prototype.toggle=function(a){if(this.isSelected(a))this.columns=this.columns.filter(function(b){return b.name!==a.name});else{var b=this.allColumns.findIndex(function(b){return b.prop===a.prop});this.columns.splice(b,0,a),this.columns=this.columns.slice()}},a.prototype.isSelected=function(a){return this.columns.find(function(b){return b.name===a.name})},a.prototype.isInColumnSelectorView=function(a,b){if(a){return!!b.toLowerCase().includes(a.toLowerCase())}return!0},a.prototype.selectAllColumns=function(){this.columns=this.allColumns.slice(),this.columns=this.columns.slice()},a.prototype.clearSelections=function(){this.columns=[],this.columns=this.columns.slice()},a.prototype.onRowActivation=function(a){if("click"===a.type){var b=a.row;"bookmark"!==a.column.prop?this.onShowDefectDetailsPage(b):(b.bookmark=0===b.bookmark?1:0,this.saveReportHeader(b),this.updateFilteredRows())}},a.prototype.isSuccessfulQuery=function(a){return!(!a.Status||!a.Status.State)&&"SUCCEEDED"===a.Status.State},a.prototype.populateData=function(a,b){if(!this.isSuccessfulQuery(a))return-1!==a.Status.StateChangeReason.indexOf("not found")?this.toastr.error("No data is found in the database."):this.toastr.error("Unable to populate data. Check query format."),this.clearData(),void(this.loading=!1);this.manualUpdate&&this.onSuccessfulQuery();var c=a.Result.slice(0,1);b||(this.columns=[]),this.allColumns=[],this.addColumnObject("report_status",b);for(var d=0,e=c;d<e.length;d++)for(var f=e[d],g=0,h=f;g<h.length;g++){var i=h[g];this.addColumnObject(i,b)}this.tmpRows=[];for(var j=a.Result.slice(1,a.Result.length),k=function(a){var b={};a.forEach(function(a,d){var e=c[0][d];b[e]=a}),b.bookmark=0,b.prop=a,l.tmpRows.push(b)},l=this,m=0,n=j;m<n.length;m++){k(n[m])}this.updateReportHeaders()},a.prototype.onSuccessfulQuery=function(){var a=this,b={user_id:this.aws.context.authentication.user.username,query_params:this.partialInputQuery};this.defectReporterApiHandler.addNewSearch(b).subscribe(function(a){},function(b){a.toastr.error("Failed to save the search. ",b)})},a.prototype.updateReportHeaders=function(){var a=this;this.defectReporterApiHandler.getReportHeaders().subscribe(function(b){for(var c=JSON.parse(b.body.text()),d=c.result,e=[],f=0,g=d;f<g.length;f++){var h=g[f];e.push(h.universal_unique_identifier)}a.rows=[];for(var i=0,j=a.tmpRows;i<j.length;i++){var k=j[i],l=e.indexOf(k.universal_unique_identifier),m=-1===l?{bookmark:0,report_status:"unread"}:d[l];a.mergeReportProperties(k,m),-1===l&&a.saveReportHeader(k)}a.updateFilteredRows(),a.loading=!1},function(b){a.toastr.error("Failed to update the addtional report information. "+b.message)})},a.prototype.saveReportHeader=function(a){var b=this,c={universal_unique_identifier:a.universal_unique_identifier,bookmark:a.bookmark,report_status:a.report_status};this.defectReporterApiHandler.updateReportHeader(c).subscribe(function(a){},function(a){b.toastr.error("Failed to update the report header. "+a.message)})},a.prototype.mergeReportProperties=function(a,b){for(var c=0,d=Object.keys(b);c<d.length;c++){var e=d[c];a[e]=JSON.parse(JSON.stringify(b[e]))}this.rows.push(a)},a.prototype.clearData=function(){this.columns=[],this.allColumns=[],this.rows=[],this.filteredRows=[]},a.prototype.addColumnObject=function(a,b){var c=a.toUpperCase(),d={};d.name=c,d.prop=a,d.sortable=!0,this.allColumns.push(d),b||this.columns.push(d)},g([c.Input(),h("design:type",Object)],a.prototype,"aws",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"metricApiHandler",void 0),g([c.Input(),h("design:type",Object)],a.prototype,"defectReporterApiHandler",void 0),g([c.Input(),h("design:type",String)],a.prototype,"partialQuery",void 0),g([c.Input(),h("design:type",String)],a.prototype,"limit",void 0),g([c.Input(),h("design:type",Function)],a.prototype,"toDefectDetailsPageCallback",void 0),g([c.Input(),h("design:type",Boolean)],a.prototype,"bookmark",void 0),a=g([c.Component({selector:"defect-datatable",template:'<div [ngSwitch]="loading">          <div *ngSwitchCase="true">         <loading-spinner></loading-spinner>     </div>      <div *ngSwitchCase="false">         <div *ngIf="isDataAvailable(rows)" class="table-header">             <label class="reports-counter">{{filteredRows.length}} Results</label>             \x3c!-- Column Selector --\x3e             <div ngbDropdown  placement="bottom-right">                 <button class="btn btn-outline-primary btn-columns" ngbDropdownToggle>                     <span>                         Columns                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                  <div class="dropdown-menu" ngbDropdownMenu (click)="$event.stopPropagation()">                     \x3c!-- Filter Input --\x3e                     <div>                         <input type="text" class="filter-input form-control" [(ngModel)]="columnFilterInput" placeholder="Search columns..." />                     </div>                      \x3c!-- Column Toggle Area --\x3e                     <div>                         <ul class="column-checkbox-area">                             <li *ngFor="let col of allColumns">                                 <div *ngIf="isInColumnSelectorView(columnFilterInput,col.name)" class="column-selector-checkbox">                                     <input                                         type="checkbox"                                         class="l-checkbox"                                         [id]="col.name"                                         (click)="toggle(col)"                                         [checked]="isSelected(col)" />                                     <label [attr.for]="col.name">{{col.name}}</label>                                 </div>                             </li>                         </ul>                     </div>                      \x3c!-- Full Column Toggle Operation Buttons --\x3e                     <div class="btn-group">                         <button type="button" class="btn btn-outline-primary btn-select" (click)="selectAllColumns()">Select All</button>                         <button type="button" class="btn btn-outline-primary btn-select" (click)="clearSelections()">Select None</button>                     </div>                                     </div>             </div>             \x3c!-- Read Status Selector --\x3e             <div ngbDropdown placement="bottom-right">                 <button class="btn btn-outline-primary btn-columns status-selector" ngbDropdownToggle>                     <span>                         Status                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                  <div class="dropdown-menu" ngbDropdownMenu (click)="$event.stopPropagation()">                     \x3c!-- Read Status Toggle Area --\x3e                     <div>                         <ul class="read-status-radio-button-area">                             <li>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label read-status">                                         <input type="radio" value="read" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" name="read-status" />                                         <span></span> Read                                     </label>                                 </div>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label read-status">                                         <input type="radio" value="unread" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" name="read-status" />                                         <span></span> Unread                                     </label>                                 </div>                                 <div class="read-status-radio-button">                                     <label class="radio-btn-label read-status">                                         <input type="radio" value="" [(ngModel)]="readStatusOption" (ngModelChange)="updateFilteredRows()" name="read-status" />                                         <span></span> All                                     </label>                                 </div>                             </li>                         </ul>                     </div>                 </div>             </div>         </div>          <div>             <ngx-datatable                 class="material"                 [(rows)]="filteredRows"                 [columnMode]="\'force\'"                  [headerHeight]="50"                 [rowHeight]="50"                 [footerHeight]="50"                  [externalSorting]="true"                  [limit]="numberOfRowsPerPage"                  [loadingIndicator]="loadingSort"                 [scrollbarH]="true"                 (sort)="onSort($event)"                 (activate)="onRowActivation($event)">                    <ngx-datatable-column name="" [sortable]="false" prop="bookmark">                     <ng-template let-row="row" let-value="value" ngx-datatable-cell-template>                         <i *ngIf="value === 0" class="fa fa-bookmark-o"></i>                         <i *ngIf="value !== 0" class="fa fa-bookmark"></i>                     </ng-template>                 </ngx-datatable-column>                 <ng-container *ngIf="isDataAvailable(filteredRows)">                     <ngx-datatable-column *ngFor="let column of columns" [name]="column[\'name\']" [sortable]="column[\'sortable\']" [prop]="column[\'prop\']"></ngx-datatable-column>                 </ng-container>             </ngx-datatable>         </div>     </div> </div>',styles:['.dropdown-menu {     max-height: 400px;     z-index: 100;     overflow-y: hidden; }  .dropdown-toggle::after {     display: none; }  .btn-columns {     margin: 10px; }  .column-selector-checkbox, .read-status-radio-button {     margin: 5px 10px 5px 10px; }  .filter-input {     margin: 10px;     width: 90%; }  .table-header {     display:inline-flex; }  .reports-counter {     padding-top: 15px; }  .status-selector{     margin-left: 0; }  .column-checkbox-area, .read-status-radio-button-area {     max-height: 200px;     overflow-y: auto; }  .ngx-datatable.material {     box-shadow: 0 0 0 0; }  ::ng-deep .datatable-body-row {    cursor: pointer; }  ::ng-deep .page-count {     display:none; }  .read-status {     font-family: "AmazonEmber-Light";     font-size: 14px; }']}),h("design:paramtypes",[e.ToastsManager])],a)}(),a("CloudGemDefectReproterDefectDatatableComponent",f)}}}),a.register("75",["6","24","7","9","78","6f","3d","a","76","77"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},p=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a,k=a},function(a){i=a},function(a){j=a},function(a){l=a},function(a){m=a}],execute:function(){n=function(){function a(a,b,c,d,e,f){this.http=a,this.aws=b,this.urlService=c,this.metric=d,this.toastr=e,this.route=f,this.limit="50",this.columns=[],this.allColumns=[],this.tabIndex=0,this.partialInputQuery="",this.recentSearches=[]}return a.prototype.ngOnInit=function(){var a=this;this.metricQueryBuilder=new d.MetricQuery(this.aws,"defect"),this.queryGraph=this.queryLastXHours(24),this._apiHandler=new k.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.route.queryParams.subscribe(function(b){a.partialInputQuery=b.params?b.params:a.partialInputQuery}),this.initializeConfigurationMappings()},a.prototype.getSubNavItem=function(a){this.tabIndex=a,this.update()},a.prototype.setLimit=function(a){this.limit=a},a.prototype.getMetricApiHandler=function(){return this.metricApiHandler},a.prototype.getDefectReporterApiHandler=function(){return this._apiHandler},a.prototype.updateGraph=function(a){this.queryGraph=a},a.prototype.runRecentSearch=function(a){this.facetgenerator.emitActiveTab(0),this.partialInputQuery="*"==a?"":a},a.prototype.initializeConfigurationMappings=function(){var a=localStorage.getItem("configurationMappings");this.configurationMappings=a?JSON.parse(a):[{key:"report_status",displayName:"Status",category:"Report Information"},{key:"client_timestamp",displayName:"Time",category:"Report Information"},{key:"p_event_source",displayName:"Source",category:"Report Information"},{key:"p_event_name",displayName:"Category",category:"Report Information"},{key:"universal_unique_identifier",displayName:"Report ID",category:"Report Information"},{key:"annotation",displayName:"Player text",category:"Report Information"},{key:"unique_user_identifier",displayName:"Player ID",category:"Player Information"},{key:"locale",displayName:"Locale",category:"Player Information"},{key:"client_ip_address",displayName:"IP address",category:"Player Information"},{key:"p_client_build_identifier",displayName:"Build Version",category:"System Information"},{key:"platform_identifier",displayName:"Platform",category:"System Information"}]},a.prototype.queryLastXHours=function(a){return new g.MetricGraph("Number of Defects per Hour","Hours","Number of Defects",[],[this.postQuery(h.Queries.lastXHours(a))],[g.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.queryLastXDays=function(a){return new g.MetricGraph("Number of Defects per Day","Days","Number of Defects",[],[this.postQuery(h.Queries.lastXDays(a))],[g.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.queryLastXMonths=function(a){return new g.MetricGraph("Number of Defects per Month","Months","Number of Defects",[],[this.postQuery(h.Queries.lastXMonths(a))],[g.MetricBarData],"ngx-charts-bar-vertical",[],[])},a.prototype.postQuery=function(a){return this.metricApiHandler.postQuery(this.metricQueryBuilder.toString(a))},a.prototype.update=function(){var a=this;3===this.tabIndex&&(this.isLoadingRecentSearches=!0,this._apiHandler.getRecentSearches(this.aws.context.authentication.user.username).subscribe(function(b){var c=JSON.parse(b.body.text());a.recentSearches=c.result,a.isLoadingRecentSearches=!1},function(b){a.toastr.error("Failed to load the recent searches. ",b),a.isLoadingRecentSearches=!1}))},a.prototype.shareRecentSearch=function(a){var b=this.urlService.baseUrl;b=-1===b.indexOf("deployment=")?b:b.slice(0,b.indexOf("deployment=")-1),b+=-1==b.indexOf("?")?"?deployment=":"&deployment=",b+=this.aws.context.project.activeDeployment.settings.name+"&target=CloudGemDefectReporter&params="+encodeURIComponent(a.query_params),l.Clipboard.copy(b),this.toastr.success("The shareable search URL has been copied to your clipboard.","Copy To Clipboard")},o([c.Input(),p("design:type",Object)],a.prototype,"context",void 0),o([c.Input(),p("design:type",Object)],a.prototype,"metricApiHandler",void 0),o([c.Input(),p("design:type",Function)],a.prototype,"toDefectDetailsPageCallback",void 0),o([c.ViewChild("datatable"),p("design:type",Object)],a.prototype,"datatable",void 0),o([c.ViewChild("bookmarktable"),p("design:type",Object)],a.prototype,"bookmarktable",void 0),o([c.ViewChild("facetgenerator"),p("design:type",Object)],a.prototype,"facetgenerator",void 0),a=o([c.Component({selector:"defect-list-page",template:'<facet-generator #facetgenerator     [context]="context"      [tabs]="[\'Overview\', \'Dashboard\', \'Bookmarks\', \'Recent Searches\', \'Report Configuration\', \'Client Configuration\']"      [metricIdentifier]="context.identifier"         (tabClicked)="getSubNavItem($event)"></facet-generator>  \x3c!-- Overview Facet --\x3e <div *ngIf="tabIndex === 0">      <h3>Search Defects</h3>     <form class="searchForm">          \x3c!-- Query input --\x3e         <input type="text" class="form-control" [(ngModel)]="partialInputQuery" [ngModelOptions]="{standalone: true}" placeholder="Preview with empty field or enter the parameters after the WHERE statement in a standard ANSI SQL query here..."/>         <div class="btn-group">                          \x3c!-- Limit Selector dropdown button --\x3e             <div class="btn-group" ngbDropdown placement="bottom-right" role="group">                 <button class="btn btn-outline-primary btn-limit" ngbDropdownToggle>                     <span>                         {{limit}}                         <i class="fa fa-caret-down" aria-hidden="true"></i>                     </span>                 </button>                 <div class="dropdown-menu" ngbDropdownMenu>                     <button class="dropdown-item" (click)="setLimit(\'10\')">10</button>                     <button class="dropdown-item" (click)="setLimit(\'50\')">50</button>                     <button class="dropdown-item" (click)="setLimit(\'100\')">100</button>                     <button class="dropdown-item" (click)="setLimit(\'ALL\')">ALL</button>                 </div>             </div>              \x3c!-- Search Button--\x3e             <button type="button" class="btn l-primary btn-search" (click)="datatable.fetchQueryFromInput(partialInputQuery, true)">                 Search             </button>         </div>     </form>      \x3c!-- Ngx Datatable --\x3e     <defect-datatable #datatable         [aws]="aws"         [metricApiHandler]="getMetricApiHandler()"         [defectReporterApiHandler]="getDefectReporterApiHandler()"         [partialQuery]="partialInputQuery"         [limit]="limit"         [toDefectDetailsPageCallback]="toDefectDetailsPageCallback"         [bookmark]="false">     </defect-datatable>      </div>  \x3c!-- Dashboard Facet --\x3e <div *ngIf="tabIndex === 1">      <div ngbDropdown>         <button class="btn btn-outline-primary" ngbDropdownToggle>             <span>                 Select Time Period                     <i class="fa fa-caret-down" aria-hidden="true"></i>             </span>         </button>         <div ngbDropdownMenu>             <button class="dropdown-item" (click)="updateGraph(queryLastXHours(12))">Last 12 Hours</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXHours(24))">Last 24 Hours</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXDays(7))">Last 7 Days</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXDays(30))">Last 30 Days</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(3))">Last 3 Months</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(6))">Last 6 Months</button>             <button class="dropdown-item" (click)="updateGraph(queryLastXMonths(12))">Last 12 Months</button>         </div>     </div>            <graph [ref]="queryGraph"></graph>  </div>  \x3c!-- Bookmarks Facet --\x3e <div *ngIf="tabIndex === 2">     \x3c!-- Ngx Datatable --\x3e     <defect-datatable #bookmarktable         [aws]="aws"         [metricApiHandler]="getMetricApiHandler()"         [defectReporterApiHandler]="getDefectReporterApiHandler()"         [partialQuery]="\'\'"         [limit]="limit"         [toDefectDetailsPageCallback]="toDefectDetailsPageCallback"         [bookmark]="true">     </defect-datatable>   </div>  \x3c!-- Recent Searches Facet --\x3e <div *ngIf="tabIndex === 3">     <h2>Recent Searches</h2>     <div [ngSwitch]="isLoadingRecentSearches">         <div *ngSwitchCase="true">             <loading-spinner></loading-spinner>         </div>         <div *ngSwitchCase="false">             <div *ngIf="recentSearches && recentSearches.length > 0">                 <table class="table table-hover">                     <thead>                         <tr>                             <th class="query-params-column">QUERY PARAMETERS</th>                             <th class="timestamp-column">TIMESTAMP</th>                         </tr>                     </thead>                     <tbody>                         <tr *ngFor="let recentSearch of recentSearches">                             <td *ngIf="recentSearch[\'query_params\'] != \'*\'" class="query-params-column" (click)="runRecentSearch(recentSearch[\'query_params\'])">{{recentSearch[\'query_params\']}}</td>                             <td *ngIf="recentSearch[\'query_params\'] == \'*\'" class="query-params-column" (click)="runRecentSearch(recentSearch[\'query_params\'])"></td>                             <td class="timestamp-column" (click)="runRecentSearch(recentSearch[\'query_params\'])">{{recentSearch[\'timestamp\']}}</td>                             <td>                                 <div class="float-right">                                     <i (click)="shareRecentSearch(recentSearch)" class="fa fa-share-square-o" data-toggle="tooltip" data-placement="top" title="Share"></i>                                 </div>                             </td>                         </tr>                     </tbody>                 </table>             </div>         </div>     </div> </div>  \x3c!-- Configure Facet --\x3e <div *ngIf="tabIndex === 4">     <report-configuration [(mappings)]="configurationMappings"></report-configuration> </div>  <div *ngIf="tabIndex === 5">     <client-configuration [context]="context"></client-configuration> </div>',styles:["  .searchForm > input {     width: 75%;     float: left;     margin: 0 10px 0 0; }  .dropdown-menu {     max-height: 400px;     overflow-y: auto;     z-index: 100; }  .dropdown-toggle::after {     display: none; }  .sql-doc {     margin: 5px 5px 5px 5px; }"]}),p("design:paramtypes",[e.Http,f.AwsService,j.UrlService,j.LyMetricService,i.ToastsManager,m.ActivatedRoute])],a)}(),a("CloudGemDefectReporterDefectListPageComponent",n)}}}),a.register("79",["6","a","9","3d"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},i=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(a,b,d){this.aws=a,this.toastr=b,this.metric=d,this.deleteComment=new c.EventEmitter,this.editComment=new c.EventEmitter}return a.prototype.ngOnInit=function(){this.reportInformation.report_time=this.reportInformation.p_server_timestamp_month+"/"+this.reportInformation.p_server_timestamp_day+"/"+this.reportInformation.p_server_timestamp_year+this.reportInformation.p_server_timestamp_hour+":00:00",this.getScreenshotUrl()},a.prototype.getScreenshotUrl=function(){var a=this.reportInformation.screenshot_attachment.id,b=this.aws.context.s3.getSignedUrl("getObject",{Bucket:this.context.SanitizedBucketName,Key:a,Expires:600});this.reportInformation.screenshot_attachment.url=b},a.prototype.downloadAttachment=function(a){this.aws.context.s3.getObject({Bucket:this.context.SanitizedBucketName,Key:a.id},function(b,c){if(b)this.toastr.error("The attachment failed to download. The received error was '"+b.message+"'");else{var d=new Blob([c.Body],{type:c.ContentType});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(d,a.id+"."+a.extension);else{var e=document.createElement("a"),f=URL.createObjectURL(d);e.href=f,e.download=a.id+"."+a.extension,window.document.body.appendChild(e),e.click(),window.document.body.removeChild(e),URL.revokeObjectURL(f)}}}.bind(this))},h([c.Input(),i("design:type",Object)],a.prototype,"context",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"reportInformation",void 0),h([c.Input(),i("design:type",Object)],a.prototype,"configurationMappings",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"deleteComment",void 0),h([c.Output(),i("design:type",Object)],a.prototype,"editComment",void 0),a=h([c.Component({selector:"report-information",template:'<h2 class="header">Report Information</h2> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'Report Information\' && reportInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div> <div *ngIf="reportInformation.screenshot_attachment" class="row">     <label class="col-5 affix">Screenshot</label>     <div class="col-7">         <label class="download-link" (click)="downloadAttachment(reportInformation.screenshot_attachment)">{{reportInformation.screenshot_attachment.id}}.{{reportInformation.screenshot_attachment.extension}}</label>         <img [src]="reportInformation.screenshot_attachment.url" alt="Report screenshot">     </div> </div> <div *ngIf="reportInformation.dxdiag_attachment" class="row">     <label class="col-5 affix">DxDiag</label>     <div class="col-7">         <label class="download-link" (click)="downloadAttachment(reportInformation.dxdiag_attachment)">{{reportInformation.dxdiag_attachment.id}}.{{reportInformation.dxdiag_attachment.extension}}</label>     </div> </div> <div *ngIf="reportInformation.log_attachment" class="row">     <label class="col-5 affix">Game log</label>     <div class="col-7">         <label class="download-link" (click)="downloadAttachment(reportInformation.log_attachment)">{{reportInformation.log_attachment.id}}.{{reportInformation.log_attachment.extension}}</label>     </div> </div> <div *ngIf="reportInformation.comments" class="row">     <label class="col-5 affix">Comments</label>     <div class="col-7">         <p *ngFor="let comment of reportInformation.comments let i = index">             {{comment.user}} - {{comment.date}} <br />             {{comment.content}}             <i class="fa fa-cog edit" data-toggle="tooltip" data-placement="top" title="Edit comment" (click)="editComment.emit(i)" ></i>             <i class="fa fa-trash" data-toggle="tooltip" data-placement="top" title="Delete comment" (click)="deleteComment.emit(i)"></i>         </p>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}"]}),i("design:paramtypes",[e.AwsService,f.ToastsManager,d.LyMetricService])],a)}(),a("CloudGemDefectReporterReportInformationComponent",g)}}}),a.register("7a",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a}return f([c.Input(),g("design:type",Object)],a.prototype,"playerInformation",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"configurationMappings",void 0),a=f([c.Component({selector:"player-information",template:'<h2 class="header">Player Information</h2> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'Player Information\' && playerInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterPlayerInformationComponent",e)}}}),a.register("7b",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a}return f([c.Input(),g("design:type",Object)],a.prototype,"systemInformation",void 0),f([c.Input(),g("design:type",Object)],a.prototype,"configurationMappings",void 0),a=f([c.Component({selector:"system-information",template:'<h2 class="header">System Information</h2> <div *ngFor="let mapping of configurationMappings">     <div *ngIf="mapping[\'category\'] === \'System Information\' && systemInformation[mapping[\'key\']]" class="row">         <label class="col-5 affix">{{mapping[\'displayName\']}}</label>         <div class="col-7">             <p>{{mapping[\'value\']}}</p>         </div>     </div> </div>',styles:[".detail-information{width:45%;display:inline-block;vertical-align:top;margin-top:20px}.header{padding-left:15px}.report-operation{margin-left:10px}.download-link{color:#6441A5}.download-link:hover{cursor:pointer}"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterSystemInformationComponent",e)}}}),a.register("7c",["6","a"],function(a,b){"use strict";var c,d,e,f=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},g=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a}],execute:function(){e=function(){function a(a){this.metric=a,this.mappingsChange=new c.EventEmitter,this.displayCategories=["Report Information","Player Information","System Information"]}return a.prototype.ngOnInit=function(){this.tableDropdownOptions=new Array;for(var a=0,b=this.displayCategories;a<b.length;a++){var c=b[a];this.tableDropdownOptions.push({text:c})}},a.prototype.addNewMapping=function(){var a={key:"",displayName:"",category:""};this.mappings.unshift(a),this.mappingsChange.emit(this.mappings),this.updateMappings()},a.prototype.deleteMapping=function(a){this.mappings.splice(a,1),this.updateMappings()},a.prototype.updateCategory=function(a,b){b.category=a.text,this.updateMappings()},a.prototype.updateMappings=function(){this.mappingsChange.emit(this.mappings),window.localStorage.setItem("configurationMappings",JSON.stringify(this.mappings))},f([c.Input(),g("design:type",Object)],a.prototype,"mappings",void 0),f([c.Output(),g("design:type",Object)],a.prototype,"mappingsChange",void 0),a=f([c.Component({selector:"report-configuration",template:'<h2>Data Mappings</h2> <button class="btn l-primary" (click)="addNewMapping()">     Add Mapping </button> <div class="configuration-container">     <div class="row mapping">         <div class="col-3">             <label>KEY</label>         </div>         <div class="col-3">             <label>DISPLAY NAME</label>         </div>         <div class="col-3">             <label>DISPLAY CATEGORY</label>         </div>     </div>     <div *ngFor="let mapping of mappings let i = index" class="row mapping">         <div class="col-3">             <input class="form-control" type="text" [(ngModel)]="mapping[\'key\']" (ngModelChange)="updateMappings()"/>         </div>         <div class="col-3">             <input class="form-control" type="text" [(ngModel)]="mapping[\'displayName\']" (ngModelChange)="updateMappings()"/>         </div>         <div class="col-3">             <dropdown class="display-category" placeholderText="Category" [currentOption]="{text: mapping[\'category\']}" (dropdownChanged)="updateCategory($event, mapping)"                       [options]="tableDropdownOptions"></dropdown>         </div>         <div class="float-right">             <i (click)="deleteMapping(i)" class="fa fa-trash-o delete-icon" data-toggle="tooltip" data-placement="top" title="Delete"></i>         </div>     </div> </div>',styles:[".configuration-container {     padding-top: 15px; }  .mapping {     padding-bottom: 5px; }  .display-category {     padding-left: 0px; }"]}),g("design:paramtypes",[d.LyMetricService])],a)}(),a("CloudGemDefectReporterReportConfigurationComponent",e)}}}),a.register("7d",["6","7","9","f","e","a","d","6f"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},n=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a}],execute:function(){!function(a){a[a.List=0]="List",a[a.CreateField=1]="CreateField",a[a.EditField=2]="EditField",a[a.DeleteField=3]="DeleteField"}(k||(k={})),l=function(){function a(a,b,c,d,e,f){var g=this;this.fb=a,this.http=b,this.aws=c,this.toastr=d,this.vcr=e,this.metric=f,this.EditMode=k,this.customFields=[],this.fieldTypes=[{typeinfo:{type:"predefined",multipleSelect:!0},displayText:"Multiple Choice (Checkboxes)"},{typeinfo:{type:"predefined",multipleSelect:!1},displayText:"Single Choice (Radio Buttons)"},{typeinfo:{type:"text"},displayText:"Text"}],this.onShowAddNewFieldModal=function(){g.curEditingField=g.createDefaultField(),g.createFieldForms(),g.editMode=k.CreateField},this.onShowDeleteFieldModal=function(a,b){g.curEditingField=a,g.curFieldIndex=b,g.editMode=k.DeleteField},this.onDismissModal=function(){g.editMode=k.List},this.dummyRadioButtonForm=a.group({dummy:"dummy"})}return a.prototype.ngOnInit=function(){this._apiHandler=new j.CloudGemDefectReporterApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.getClientConfiguration(),this.editMode=k.List},a.prototype.getClientConfiguration=function(){var a=this;this.isLoadingClientConfiguration=!0,this._apiHandler.getClientConfiguration().subscribe(function(b){var c=JSON.parse(b.body.text());a.customFields=c.result.clientConfiguration,a.dummyTextAreaModels=[];for(var d=0,e=a.customFields;d<e.length;d++){e[d];a.dummyTextAreaModels.push("")}a.isLoadingClientConfiguration=!1},function(b){a.toastr.error("Failed to load the custom client configuration ",b),a.isLoadingClientConfiguration=!1})},a.prototype.createFieldForms=function(){this.createFieldTitleForm(),this.createPredefinedFieldForm(),this.createTextFieldForm()},a.prototype.createFieldTitleForm=function(){this.fieldTitleForm=this.fb.group({title:[this.curEditingField.title,i.Validators.compose([i.Validators.required])]})},a.prototype.createPredefinedFieldForm=function(){if(this.predefinedFieldForm=this.fb.group({options:this.fb.array([])}),this.curEditingField.predefines)for(var a=this.predefinedFieldForm.controls.options,b=0,c=this.curEditingField.predefines;b<c.length;b++){var d=c[b],e=this.fb.group({value:[d,i.Validators.compose([i.Validators.required])]});a.push(e)}},a.prototype.createTextFieldForm=function(){this.textFieldForm=this.fb.group({maxChars:[this.curEditingField.maxChars,i.Validators.compose([i.Validators.required])]})},a.prototype.createDefaultField=function(){var a={};return a.type="predefined",a.multipleSelect=!0,a.predefines=[""],a},a.prototype.onChangeFieldType=function(a){this.curEditingField.type=a.typeinfo.type,"predefined"==this.curEditingField.type&&(this.curEditingField.multipleSelect=a.typeinfo.multipleSelect)},a.prototype.isFormFieldRequiredEmpty=function(a,b){return a.controls[b].hasError("required")&&a.controls[b].touched},a.prototype.isFormFieldNotValid=function(a,b){return!a.controls[b].valid&&a.controls[b].touched},a.prototype.onAddOption=function(){this.predefinedFieldForm.controls.options.push(this.fb.group({value:[null,i.Validators.compose([i.Validators.required])]}))},a.prototype.onDeleteOption=function(a){this.predefinedFieldForm.controls.options.removeAt(a)},a.prototype.onModifyField=function(){this.validateFieldForms()&&(this.extractFieldForm(),this.customFields[this.curFieldIndex]=JSON.parse(JSON.stringify(this.curEditingField)),this.updateClientConfiguration(),this.modalRef.close())},a.prototype.onAddField=function(){this.validateFieldForms()&&(this.extractFieldForm(),this.customFields.push(this.curEditingField),this.dummyTextAreaModels.push(""),this.updateClientConfiguration(),this.modalRef.close())},a.prototype.updateClientConfiguration=function(){var a=this,b={clientConfiguration:this.customFields};this._apiHandler.updateClientConfiguration(b).subscribe(function(b){a.toastr.success("The client configuration was saved successfully.")},function(b){a.toastr.error("Failed to update the client configuration. ",b)})},a.prototype.validateFieldForms=function(){var a=!0;switch(a=this.validateTitleFieldForm()&&a,this.curEditingField.type){case"predefined":a=this.validatePredefinedFieldForm()&&a;break;case"text":a=this.validateTextFieldForm()&&a}return a},a.prototype.validateTitleFieldForm=function(){return this.fieldTitleForm.controls.title.markAsTouched(),this.fieldTitleForm.controls.title.valid},a.prototype.validateTextFieldForm=function(){return this.textFieldForm.controls.maxChars.markAsTouched(),this.textFieldForm.controls.maxChars.valid},a.prototype.validatePredefinedFieldForm=function(){for(var a=!0,b=this.predefinedFieldForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c],f=e;f.controls.value.markAsTouched(),a=a&&f.controls.value.valid}return a},a.prototype.extractFieldForm=function(){switch(this.curEditingField.title=this.fieldTitleForm.value.title,this.curEditingField.type){case"predefined":for(var a=[],b=this.predefinedFieldForm.controls.options,c=0,d=b.controls;c<d.length;c++){var e=d[c];a.push(e.value.value)}this.curEditingField.predefines=a;break;case"text":this.curEditingField.maxChars=this.textFieldForm.value.maxChars}},a.prototype.getFieldTypeDisplayText=function(){switch(this.curEditingField.type){case"text":return"Text";case"predefined":return this.curEditingField.multipleSelect?"Multiple Choice (Checkboxes)":"Single Choice (Radio Buttons)";default:return"unknown"}},a.prototype.onDeleteField=function(){this.customFields.splice(this.curFieldIndex,1),this.dummyTextAreaModels.splice(this.curFieldIndex,1),this.updateClientConfiguration(),this.modalRef.close()},a.prototype.onShowModifyFieldModal=function(a,b){this.curEditingField=JSON.parse(JSON.stringify(a)),this.curEditingField.predefines&&0!=this.curEditingField.predefines.length||(this.curEditingField.predefines=[""]),this.createFieldForms(),this.editMode=k.EditField,this.curFieldIndex=b},m([c.Input(),n("design:type",Object)],a.prototype,"context",void 0),m([c.ViewChild(f.ModalComponent),n("design:type",f.ModalComponent)],a.prototype,"modalRef",void 0),a=m([c.Component({selector:"client-configuration",template:'<div [ngSwitch]="isLoadingClientConfiguration">     <div *ngSwitchCase="true">         <div class="loading-spinner-container">             <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>         </div>     </div>     <div class="content-container" *ngSwitchCase="false">         <div class="field-preview" *ngFor="let field of customFields; let fieldIndex = index">             <span class="float-right">                 <i (click)="onShowModifyFieldModal(field, fieldIndex)" class="fa fa-cog" data-toggle="tooltip" data-placement="top" title="Edit"></i>                 <i (click)="onShowDeleteFieldModal(field, fieldIndex)" class="fa fa-trash-o"></i>             </span>             <div class="questino-title">                 {{field.title}}             </div>              <div class="fields" *ngIf="field[\'type\'] == \'predefined\'">                 <ng-container *ngIf="field[\'multipleSelect\'] == true">                     <div class="radio-btn-label" *ngFor="let predefine of field[\'predefines\']; let i = index">                         <input id="field_{{fieldIndex}}_option_{{i}}" type="checkbox" />                         <label class="l-checkbox" for="field_{{fieldIndex}}_option_{{i}}">                             {{predefine}}                         </label>                     </div>                 </ng-container>                 <ng-container *ngIf="field[\'multipleSelect\'] == false">                     <div [formGroup]="dummyRadioButtonForm">                         <div class="radio-btn-container">                             <div *ngFor="let predefine of field[\'predefines\']; let i = index">                                 <label class="radio-btn-label">                                     <input class="form-control" type="radio" [value]="i" formControlName="dummy" />                                     <span></span> {{predefine}}                                 </label>                             </div>                         </div>                     </div>                 </ng-container>             </div>              <div class="fields" *ngIf="field.type == \'text\'">                 <div>                     <textarea class="field-textarea-preview" [(ngModel)]="dummyTextAreaModels[fieldIndex]" [maxLength]="field.maxChars"></textarea>                     <div class="question-textarea-chars-label">                         {{dummyTextAreaModels[fieldIndex].length}}/{{field.maxChars}}                     </div>                 </div>             </div>         </div>     </div> </div> <button class="btn l-primary add-button" (click)="onShowAddNewFieldModal()">     Add New Field </button>  <modal *ngIf="editMode == EditMode.EditField || editMode == EditMode.CreateField"         [title]="editMode == EditMode.EditField ? \'Edit Field\' : \'Add New Field\'"         [autoOpen]="true"         [hasSubmit]="true"         [submitButtonText]="editMode == EditMode.EditField ? \'Save Changes\' : \'Add Field\'"         [onDismiss]="onDismissModal"         [onClose]="onDismissModal"         (modalSubmitted)="editMode == EditMode.EditField ? onModifyField() : onAddField()">     <div class="modal-body">         <div class="form-group row">             <label class="col-form-label col-3">                 Field Type             </label>             <div class="d-inline-block dropdown-outer col-8 field-type-dropdown" ngbDropdown>                 <button type="button" class="btn l-dropdown col-12" id="path-dropdown" ngbDropdownToggle>                     <span class="dropdown-inner"> {{getFieldTypeDisplayText()}} </span>                     <i class="fa fa-caret-down" aria-hidden="true"></i>                 </button>                 <div class="dropdown-menu dropdown-menu-center" aria-labelledby="path-dropdown">                     <button *ngFor="let fieldType of fieldTypes" type="button" class="dropdown-item" (click)="onChangeFieldType(fieldType)"> {{fieldType.displayText}} </button>                 </div>             </div>         </div>          <form [formGroup]="fieldTitleForm">             <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(fieldTitleForm, \'title\')}">                 <label class="col-form-label col-3" for="title">                     Title                 </label>                 <input class="form-control col-8" id="title" type="text" [formControl]="fieldTitleForm.controls[\'title\']"                         [ngClass]="{\'form-control-danger\': isFormFieldNotValid(fieldTitleForm, \'title\')}" />                  <span class="col-3"></span>                 <div *ngIf="isFormFieldRequiredEmpty(fieldTitleForm, \'title\')" class="form-control-feedback col-8">Title cannot be empty</div>             </div>         </form>          <ng-container *ngIf="curEditingField.type == \'text\'">             <form [formGroup]="textFieldForm">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(textFieldForm, \'maxChars\')}">                     <label class="col-form-label col-3" for="maxChars">                         Character Limit                     </label>                     <input class="form-control col-8" id="maxChars" type="number" [formControl]="textFieldForm.controls[\'maxChars\']"                             [ngClass]="{\'form-control-danger\': isFormFieldNotValid(textFieldForm, \'maxChars\')}" />                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(textFieldForm, \'maxChars\')" class="form-control-feedback col-8">Character Limit is invalid</div>                 </div>             </form>         </ng-container>          <ng-container *ngIf="curEditingField.type == \'predefined\'">             <div *ngFor="let optionForm of predefinedFieldForm.controls[\'options\'].controls; let i = index; trackBy:trackByFn">                 <div class="form-group row" [ngClass]="{\'has-danger\': isFormFieldNotValid(optionForm, \'value\')}">                     <label class="col-form-label col-3" *ngIf="i==0">                         Multiple Choice Options                     </label>                     <span class="col-3" *ngIf="i>0"></span>                      <input class="form-control col-8" type="text" [formControl]="optionForm.controls[\'value\']"                             [ngClass]="{\'form-control-danger\': isFormFieldNotValid(optionForm, \'value\')}" />                     <i *ngIf="i > 0" class="fa fa-close col-form-label col-1 delete-option-icon" (click)="onDeleteOption(i)"></i>                      <span class="col-3"></span>                     <div *ngIf="isFormFieldRequiredEmpty(optionForm, \'value\')" class="form-control-feedback col-8">Option cannot be emtpy</div>                 </div>             </div>             <div class="form-group row">                 <span class="col-3"></span>                 <div class="col-8 add-option-button">                     <button class="btn btn-outline-primary" (click)="onAddOption()">                         + Add Option                     </button>                 </div>             </div>         </ng-container>     </div> </modal>  <modal *ngIf="editMode == EditMode.DeleteField"         title="Delete Field"         [autoOpen]="true"         [hasSubmit]="true"         [onDismiss]="onDismissModal"         [onClose]="onDismissModal"         submitButtonText="Delete Field"         (modalSubmitted)="onDeleteField(this.fieldIndex)"         [metricIdentifier]="context.identifier">     <div class="modal-body">         <p>             Are you sure you want to delete {{curEditingField.title}}?         </p>     </div> </modal>',styles:[".field-type-dropdown{padding:0px}.delete-option-icon{color:red;cursor:pointer}.questino-title{font-weight:bold}.field-preview{border:1px solid #eee;width:800px;padding:10px;margin-top:15px;margin-bottom:15px}.field-preview .fields{padding-top:10px}.field-preview .field-textarea-preview{width:560px;height:200px;max-height:200px}.field-preview .field-textarea-chars-label{width:70%;text-align:right}.content{margin-bottom:30px}.loading-spinner-container{clear:both;text-align:center}"]}),n("design:paramtypes",[i.FormBuilder,d.Http,e.AwsService,g.ToastsManager,c.ViewContainerRef,h.LyMetricService])],a)}(),a("CloudGemDefectReporterClientConfigurationComponent",l)}}}),a.register("7e",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(){}return a.lastXHours=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%m-%d %Hh') as Hour, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' hour), '%Y%m%d%H0000')  \n            GROUP BY date_format(from_unixtime(server_timestamp), '%m-%d %Hh') \n            ORDER BY date_format(from_unixtime(server_timestamp), '%m-%d %Hh') ASC"},a.lastXDays=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%Y-%m-%d') as Day, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' day), '%Y%m%d%H0000') \n            GROUP BY date_format(from_unixtime(server_timestamp), '%Y-%m-%d') \n            ORDER BY date_format(from_unixtime(server_timestamp), '%Y-%m-%d') ASC"},a.lastXMonths=function(a){return"SELECT date_format(from_unixtime(server_timestamp), '%Y-%m') as Month, count(distinct universal_unique_identifier) AS count \n            FROM ${database}.${table}\n            WHERE p_server_timestamp_strftime >= date_format((current_timestamp - interval '"+String(a)+"' month), '%Y%m%d%H0000') \n            GROUP BY date_format(from_unixtime(server_timestamp), '%Y-%m')\n            ORDER BY date_format(from_unixtime(server_timestamp), '%Y-%m') ASC"},a}(),a("Queries",c)}}}),a.register("7f",["12","13","6","6f"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a=h([e.NgModule({imports:[d.GameSharedModule,c.GemModule],declarations:[f.CloudGemDefectReporterIndexComponent,f.CloudGemDefectReporterThumbnailComponent,f.CloudGemDefectReporterDefectDetailsPageComponent,f.CloudGemDefectReporterDefectListPageComponent,f.CloudGemDefectReproterDefectDatatableComponent,f.CloudGemDefectReporterReportInformationComponent,f.CloudGemDefectReporterPlayerInformationComponent,f.CloudGemDefectReporterSystemInformationComponent,f.CloudGemDefectReporterClientConfigurationComponent,f.CloudGemDefectReporterReportConfigurationComponent],providers:[],bootstrap:[f.CloudGemDefectReporterThumbnailComponent,f.CloudGemDefectReporterIndexComponent]})],a)}(),a("CloudGemDefectReporterModule",g)}}}),a.register("6f",["6e","70","6d","72","73","74","75","79","7a","7b","7c","7d","7e","7f"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("6c",["6f"],function(a,b){"use strict";function c(a){return d.CloudGemDefectReporterModule}b&&b.id;a("definition",c);var d;return{setters:[function(a){d=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/view/game/module/cloudgems/class/index.js","@angular/core","rxjs/Observable.js","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","app/shared/class/index.js","rxjs/add/operator/delay.js","ng2-toastr/ng2-toastr.js","app/shared/component/index.js","app/view/game/module/shared/class/index.js","app/view/game/module/shared/class/metric-graph.class.js","ts-clipboard","@angular/router","ng2-toastr","@angular/forms","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("rxjs/Observable.js"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("app/shared/class/index.js"),require("rxjs/add/operator/delay.js"),require("ng2-toastr/ng2-toastr.js"),require("app/shared/component/index.js"),require("app/view/game/module/shared/class/index.js"),require("app/view/game/module/shared/class/metric-graph.class.js"),require("ts-clipboard"),require("@angular/router"),require("ng2-toastr"),require("@angular/forms"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});